from django.db import models
from django.contrib.auth.models import AbstractUser

class FitQuestUser(AbstractUser):
    friends = models.ManyToManyField('self', symmetrical=False)

class Activity(models.Model):
    user = models.ForeignKey(FitQuestUser, on_delete=models.CASCADE)
    activity_type = models.CharField(max_length=50)
    duration = models.DurationField()
    date = models.DateField()

class Achievement(models.Model):
    user = models.ForeignKey(FitQuestUser, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    description = models.TextField()

class Goal(models.Model):
    user = models.ForeignKey(FitQuestUser, on_delete=models.CASCADE)
    target = models.IntegerField()
    progress = models.IntegerField(default=0)

class UserFeedback(models.Model):
    user = models.ForeignKey(FitQuestUser, on_delete=models.CASCADE)
    feedback_text = models.TextField()


from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import IsAuthenticated
from rest_framework.response import Response
from .models import Activity, Achievement, Goal, FitQuestUser, UserFeedback
from .serializers import (
    FitQuestUserSerializer, ActivitySerializer, AchievementSerializer,
    GoalSerializer, UserFeedbackSerializer
)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def log_activity(request):
    try:
        user = request.user
        activity_data = {
            'user': user.id,
            'activity_type': request.data['activity_type'],
            'duration': request.data['duration'],
            'date': request.data['date'],
        }
        serializer = ActivitySerializer(data=activity_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def set_goal(request):
    try:
        user = request.user
        goal_data = {
            'user': user.id,
            'target': request.data['target'],
        }
        serializer = GoalSerializer(data=goal_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_points(request):
    try:
        user = request.user
        activities = Activity.objects.filter(user=user)
        total_points = sum(activity.duration.seconds //60 for activity in activities)
        return Response({'points': total_points}, status=200)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_friends(request):
    user = request.user
    friends = user.friends.all()
    serializer = FitQuestUserSerializer(friends, many=True)
    return Response(serializer.data, status=200)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_friend(request):
    try:
        user = request.user
        friend_email = request.data['friend_email']
        friend = FitQuestUser.objects.get(email=friend_email)
        user.friends.add(friend)
        return Response({'message': f'{friend.username} added to friends.'}, status=200)
    except FitQuestUser.DoesNotExist:
        return Response({'error': 'Friend not found.'}, status=404)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def share_achievement(request):
    try:
        user = request.user
        friend_email = request.data['friend_email']
        friend = FitQuestUser.objects.get(email=friend_email)
        achievement_id = request.data['achievement_id']
        achievement = Achievement.objects.get(id=achievement_id, user=user)

        shared_achievement_data = {
            'user': friend.id,
            'name': achievement.name,
            'description': achievement.description,
        }
        achievement_serializer = AchievementSerializer(data=shared_achievement_data)
        if achievement_serializer.is_valid():
            achievement_serializer.save()

        return Response({'message': 'Achievement shared successfully.'}, status=200)
    except (FitQuestUser.DoesNotExist, Achievement.DoesNotExist):
        return Response({'error': 'Friend or Achievement not found.'}, status=404)
    except Exception as e:
        return Response({'error': str(e)}, status=500)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_personalized_recommendations(request):
    user = request.user
    most_frequent_activity = Activity.objects.filter(user=user).values('activity_type').annotate(count=models.Count('activity_type')).order_by('-count').first()

    if most_frequent_activity:
        recommended_activities = Activity.objects.filter(user=user, activity_type=most_frequent_activity['activity_type'])
        serializer = ActivitySerializer(recommended_activities, many=True)
        return Response(serializer.data, status=200)
    else:
        return Response({'message': 'No recommendations available.'}, status=200)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_fitness_progress(request):
    user = request.user
    activities = Activity.objects.filter(user=user)
    serializer = ActivitySerializer(activities, many=True)
    return Response(serializer.data, status=200)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def submit_feedback(request):
    try:
        user = request.user
        feedback_data = {'user': user.id, 'feedback_text': request.data['feedback_text']}
        serializer = UserFeedbackSerializer(data=feedback_data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=201)
        return Response(serializer.errors, status=400)
    except Exception as e:
        return Response({'error': str(e)}, status=500)


from django.urls import path, include
from rest_framework.routers import DefaultRouter

router = DefaultRouter()
router.register(r'users', FitQuestUserViewSet, basename='user')

urlpatterns = [
    path('api/', include(router.urls)),
    path('api/log-activity/', log_activity, name='log-activity'),
    path('api/set-goal/', set_goal, name='set-goal'),
    path('api/get-points/', get_points, name='get-points'),
    path('api/get-friends/', get_friends, name='get-friends'),
    path('api/add-friend/', add_friend, name='add-friend'),
    path('api/share-achievement/', share_achievement, name='share-achievement'),
    path('api/get-personalized-recommendations/', get_personalized_recommendations, name='get-personalized-recommendations'),
    path('api/get-fitness-progress/', get_fitness_progress, name='get-fitness-progress'),
    path('api/submit-feedback/', submit_feedback, name='submit-feedback'),
    
]



